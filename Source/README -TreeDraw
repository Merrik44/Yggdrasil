TreeDraw README
---------------

This is the README for the TreeDraw system, which allows users to sketch trees, and generate 3D tree models from these sketches.

This software was designed and tested under Ubuntu Linux; we can't guarantee compatibility with any other system. In addition, this software should be viewed as a rough prototype; the build process is fairly basic, and some portions of the directory structure are hardcoded. However, it should be relatively painless to get everything set up if you follow the instructions under "Building".

Resources Used:
--------------

RapidXML, available from: http://rapidxml.sourceforge.net/
Used in: LSystemParameteriser, TreeDrawGUI/Display
Licensed under the Boost Software License (Version 1.0) as well as the MIT License.

Media Resources Not Included:
----------------------------

Various media resources were used during the creation and testing of this system, but are not included in this distribution of the source code.

Texture:
Tileable tree bark texture by Irene Zeleskou (http://ftourini.deviantart.com/art/tileable-tree-bark-texture-216962711)
Place a 128x128 .png version and a 512x512 .raw version of the bark texture under the same file name in "Resources/Textures" to use this texture.

Icons:
Place the following icons in "Resources/Icons" in .png format under the given file names to use them:
LineMode.png - format-text-italic icon from the Intrigue Icon Pack (http://sourceforge.net/projects/intrigue-icons/)
PencilMode.png - draw-freehand icon from the Oxygen Icon Theme (http://www.oxygen-icons.org/)
SelectMode.png - select-rectangular icon from the Oxygen Icon Theme (http://www.oxygen-icons.org/)
Redo.png - edit-redo-7 icon from the Open Icon Library (http://openiconlibrary.sourceforge.net/) (unattributed)
Undo.png - edit-undo-7 icon from the Open Icon Library (http://openiconlibrary.sourceforge.net/) (unattributed)

Cursors:
'Precision' and 'Handwrite' cursors from the Denial Cursor Pack by Szilveszter András (http://androow.deviantart.com/art/Denial-Cursor-Pack-130329892)
Convert to .png and place in "Resources/Cursors" to use these cursors.

Directories
----------

The directory structure of TreeDraw is as follows:
  * LStringDeriver        Converts L+C files to C++ files.
  * LStringVisualiser     A simple visualiser for LST files; TreeDrawGUI provides a much more complete implementation.
  * LSystemParameteriser  Constructs an L+C file (L-system) from either the output of TreeDrawGUI or SketchConverter.
  * QTreeWidget           An old version of the visualiser for LST files, since moved to TreeDrawGUI.
  * Resources             Contains all resources used by TreeDrawGUI: icons and cursors, as well as bark textures.
  * SketchConverter       Converts the output of a sketch generated by the user in TreeDrawGUI to 3D.
  * TreeDrawGUI           The overall GUI for the program; allows users to sketch trees, and uses the other programs to convert the trees to an L-system, then displays the output of this L-system.

System Overview
---------------

The central component in the system is the TreeDrawGUI. This component allows users to sketch trees, and controls the generation process, as well as displaying the generated models. The process is as follows:
  1. First, the user sketches a tree in TreeDrawGUI; they then click the "Generate" button. The tree is saved as an XML file.
  2. The 2D-to-3D converter (SketchConverter) converts the users sketch into a 3D representation, then saves the results in an XML file.
  3. The L-system parameteriser generates an L-system from the output of the 2D-to-3D converter, and saves the result in an L+C file (see http://algorithmicbotany.org/papers/radekk.dis2002.html for an overview of the modelling language).
  4. This L+C file gets converted into a C++ file by LStringDeriver.
  5. The C++ file is compiled by GCC.
  6. The compiled binary file is executed, generating an L-system string, which is saved as an LST file (a simple file containing close-to-OpenGL commands).
  7. Back in the interface, the display component interprets the LST file, and generates (and displays) a tree model.
  8. The tree model is optionally exported to an OBJ file.

Building
--------

The following components are required before the software can be built:
 * Qt Creator   This can be downloaded from http://qt.nokia.com/products/ (although this website may be changing at some point); alternatively, it can be downloaded through the APT.
 * Boost        Available from: http://www.boost.org/. In Ubuntu, compiled Boost libraries can be downloaded using the following APT command: "sudo apt-get install libboost-all-dev".

If rebuilding the software, run "clean_all" before rebuilding:
  ./clean_all

Once these components are installed, build several applications by running the "build_all_debug" script:
  ./build_all_debug
This script builds all components except for the GUI.

To build the GUI, open "TreeDrawGUI/TreeDrawGUI.pro" in Qt Creator and build it; make sure to place the compiled files in a directory off the base directory ("TreeDrawGUI-build-desktop" by default), as the GUI searches for the other components of the system in their respective directories.

Running and Using
-----------------

Once the GUI has been built, it can be run by executing the "TreeDrawGUI" file in the GUI's build directory.

Draw trees in the left portion of the interface, using the drawing tools available (which can be changed using the buttons along the top of the screen): the line drawing tool, the selection box, and the curve drawing tool; the brush size can be changed using a drop-down box.

You can pan the sketch using the right mouse button. Draw branches using the left mouse button. Select branches by clicking, or select multiple branches by control-clicking or using the selection box; double-clicking a branch will select that branch as well as all of its siblings. Delete a branch (and all its child branches) using the "Delete" key.

You can also add user-specified variation to a selected branch (or to multiple branches, if they are selected). When selected, different controls are displayed on a branch; click and drag a control to change it. The long line near the base of the branch represents the minimum/maximum angles of that branch to its parent branch. Controls are also displayed to modify the minimum/maximum length of a branch, as well as the minimum/maximum start and end radius for the branch (be aware that the end radius of a branch is limited by its start radius).

Once you're ready to generate a 3D tree model from the sketch, click the "Generate" button. Several generation options can be changed by clicking the "Generation Options" button. Additional levels of detail extrapolates extra detail from your sketch -- increasing this increases the number of detail branches in the output model. "Branch limit" restricts the number of branches in the output model; the GUI limits this to 1000, to ensure fast generation times. Finally, "Replicate trunk exactly as drawn" will limit the amount of variation used for the trunk of the tree; disable this to make the output model appear more random.

The generated model (on the right-hand side of the screen) can be panned, rotated, and zoomed using the right and left mouse buttons. The model can be exported to OBJ from the "Display" menu.
