Yggdrasil README
---------------

This is the README for the Yggdrasil-TreeDraw system. TreeDraw is an existing procedural tree generator which allows users to sketch trees, and generate 3D tree models from these sketches. 
The Yggdrasil-TreeDraw system builds on TreeDraw by improving the realism of the models produced.

The following improvents are implementented:

1) TreeDraw produced models that are constructed as a set of generealized cylinder representing the branches. Instead, the trunk and branches of the model are constructed as a single polygon mesh. This mesh is then converted into a subdivision surface.

2) TreeDraw only produced the trunk and branches of the tree. In response to this, foliage is generated by placing a quad at then end of every branch. This quad is textured with a leaf that is procedurally generated using a sketch interface.

3) Texture synthesis is used to generate seamles bark textures from a user provided sample.



This software was developed and tested in Ubuntu 12.04 (Linux), compatibility cannot be guaranteed across other operating systems.
For the original TreeDraw readme please refer to "README-TreeDraw" 



Libraries Used:
--------------

Library:			Licence:			URL:

QT 4.8 				LPGL 				http://qt.digia.com/
RapidXML			Boost Software License 		http://rapidxml.sourceforge.net/
Boost 				Boost Software License		http://www.boost.org/
VMATH 				BSD				http://bartipan.net/vmath/




Media Resources Not Included:
----------------------------

Cursors:
'Precision' and 'Handwrite' cursors from the Denial Cursor Pack by Szilveszter András (http://androow.deviantart.com/art/Denial-Cursor-Pack-130329892)
Convert to .png and place in "Resources/Cursors" to use these cursors.

Directories
----------

The directory structure is as follows:

*** TreeDraw related folders ***

  * LStringDeriver        Converts L+C files to C++ files.
  * LStringVisualiser     A simple visualiser for LST files; TreeDrawGUI provides a much more complete implementation.
  * LSystemParameteriser  Constructs an L+C file (L-system) from either the output of TreeDrawGUI or SketchConverter.
  * QTreeWidget           An old version of the visualiser for LST files, since moved to TreeDrawGUI.
  * SketchConverter       Converts the output of a sketch generated by the user in TreeDrawGUI to 3D.
  * TreeDrawGUI           The overall GUI for the program; allows users to sketch trees, and uses the other programs to convert the trees to an L-system, then displays the output of this L-system.

*** Yggdrasil related folders ***
  * MeshGenerator         Generates a polygon mesh from an LST file and coverts it into a subdivision surface
  * TextureSynthesis      Synthesizes a new seamless texture from a user provided sample
  * LeafGenerator         A leaf sketching interface that allows users to draw an outline of a desired leaf. From this outline, a leaf is procedurally generated. This leaf is then appended to the end of every branch.

*** Other folders ***
  * Resources             Contains all resources used by TreeDrawGUI: icons and cursors,bark textures, and generated leaves.

System Overview
---------------

**** Sketch interface and tree generation ****

The system provides a sketch interface in which users draw the skeleton of their desired tree. From this sketch a 3D model is gnerated and displayed in a 3D viewport. The exact stages of this process are outlined below:

1.   First, the user sketches a tree in TreeDrawGUI; they then click the "Generate" button. The tree is saved as an XML file.
2.   The 2D-to-3D converter (SketchConverter) converts the users sketch into a 3D representation, then saves the results in an XML file.
3.   The L-system parameteriser generates an L-system from the output of the 2D-to-3D converter, and saves the result in an L+C file (see http://algorithmicbotany.org/papers/radekk.dis2002.html for an overview of the modelling language).
4.   This L+C file gets converted into a C++ file by LStringDeriver.
5.   The C++ file is compiled by GCC.
6.   The compiled binary file is executed, generating an L-system string, which is saved as an LST file (a simple file containing close-to-OpenGL commands).
7.   The LST file is parsed an a directed acyclic graph. from this graph a coarse mesh is generated for the trunk and branches.
8.   This mesh is then converted into subdivision surface through the application of Loop Subdivision. This produces a more smooth and natural mesh
9.   Foliage is generated by placing a texture quad at the endpoint of every branch. These endpoints are obtained from the graph.
10.  The generated trunk and leaves are rendered with OpenGl and diplayed in the user interface. the trunk is rendered with a seamless bark texture, while a procedurally generated leaf texture is used for the foliage.
11.  The foliage and trunk are optionally as an OBJ file.


**** Leaf Generation ****



**** Texture Synthesis ****
An interface is provided that allows users may generate their own bark textures from a sample. 
This interface can be launched from the "Texture synthesis" menu.

The synthesised texture has the following properties:

1.   It is seamless, allowing it to be tiled.
2.   It maybe larger than the sample if the user desires
3.   Multiple textures synthesied from the same sample exhibit variation




Building
--------

The following components are required before the software can be built:
 * Qt Creator   This can be downloaded from http://qt.nokia.com/products/ (although this website may be changing at some point); alternatively, it can be downloaded through the APT.
 * Boost        Available from: http://www.boost.org/. In Ubuntu, compiled Boost libraries can be downloaded using the following APT command: "sudo apt-get install libboost-all-dev".

If rebuilding the software, run "clean_all" before rebuilding:
  ./clean_all

Once these components are installed, build several applications by running the "build_all_debug" script:
  ./build_all_debug
This script builds the LStringDeriver, LStringVisualiser, LSystemParameteriser, and SketchConverter components, which are standalone executables

To build the GUI, open "TreeDrawGUI/TreeDrawGUI.pro" in Qt Creator and build it; make sure to place the compiled files in a directory off the base directory ("TreeDrawGUI-build-desktop" by default), as the GUI searches for the other components of the system in their respective directories.



Running and Using
-----------------

Once the GUI has been built, it can be run by executing the "TreeDrawGUI" file in the GUI's build directory.

Draw trees in the left portion of the interface, using the drawing tools available (which can be changed using the buttons along the top of the screen): the line drawing tool, the selection box, and the curve drawing tool; the brush size can be changed using a drop-down box.

You can pan the sketch using the right mouse button. Draw branches using the left mouse button. Select branches by clicking, or select multiple branches by control-clicking or using the selection box; double-clicking a branch will select that branch as well as all of its siblings. Delete a branch (and all its child branches) using the "Delete" key.

You can also add user-specified variation to a selected branch (or to multiple branches, if they are selected). When selected, different controls are displayed on a branch; click and drag a control to change it. The long line near the base of the branch represents the minimum/maximum angles of that branch to its parent branch. Controls are also displayed to modify the minimum/maximum length of a branch, as well as the minimum/maximum start and end radius for the branch (be aware that the end radius of a branch is limited by its start radius).

Once you're ready to generate a 3D tree model from the sketch, click the "Generate" button. Several generation options can be changed by clicking the "Generation Options" button. Additional levels of detail extrapolates extra detail from your sketch -- increasing this increases the number of detail branches in the output model. "Branch limit" restricts the number of branches in the output model; the GUI limits this to 1000, to ensure fast generation times. Finally, "Replicate trunk exactly as drawn" will limit the amount of variation used for the trunk of the tree; disable this to make the output model appear more random.

The generated model (on the right-hand side of the screen) can be panned, rotated, and zoomed using the right and left mouse buttons. The model can be exported to OBJ from the "Display" menu.
